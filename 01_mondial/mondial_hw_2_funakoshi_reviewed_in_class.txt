# Minami Funakoshi
# 6-2-2019
# Data and Databases
# Homework 1.2

# PREVIOUSLY:
create database mondial;
\c mondial

\i /Users/minami/Documents/data_and_databases/class1_mondial/mondial-schema.psql
\i /Users/minami/Documents/data_and_databases/class1_mondial/mondial-inputs.psql

# PART ONE: WARM-UP (1 POINTS)
# A explore the 'economy' table (\d economy) to get familiar with what columns are in there. 
# Do a SELECT * FROM economy; to check out some rows, and press q to get back to the prompt. Then begin:

# 1) Find the top 10 countries by GDP using: SELECT -- FROM -- ORDER BY -- LIMIT --

SELECT * FROM economy ORDER BY gdp DESC NULLS LAST LIMIT 10;

 country |   gdp    | agriculture | service | industry | inflation | unemployment 
---------+----------+-------------+---------+----------+-----------+--------------
 USA     | 16720000 |         1.1 |    79.4 |     19.5 |       1.5 |          7.3
 CN      |  9330000 |          10 |    46.1 |     43.9 |       2.6 |          4.1
 J       |  5007000 |         1.1 |    73.2 |     25.6 |       0.2 |          4.1
 D       |  3593000 |         0.8 |      69 |     30.1 |       1.6 |          5.3
 F       |  2739000 |         1.9 |    79.4 |     18.7 |       0.9 |         10.2
 GB      |  2490000 |         0.7 |    78.9 |     20.5 |         2 |          7.2
 BR      |  2190000 |         5.5 |    68.1 |     26.4 |       6.2 |          5.7
 R       |  2113000 |         4.2 |    58.3 |     37.5 |       6.8 |          5.8
 I       |  2068000 |           2 |    73.5 |     24.4 |       1.2 |         12.4
 CDN     |  1825000 |         1.7 |    69.9 |     28.4 |         1 |          7.1
(10 rows)

# 2) Get a list of countries with the GDP below 20000 using: SELECT -- FROM -- WHERE --
SELECT * FROM economy WHERE gdp < 20000 ORDER BY gdp;

 country |  gdp  | agriculture | service | industry | inflation | unemployment 
---------+-------+-------------+---------+----------+-----------+--------------
 TOK     |   1.5 |             |         |          |           |             
 NIUE    |    10 |        23.5 |    49.5 |     26.9 |         4 |           12
 HELX    |    18 |             |         |          |           |             
 MNTS    |    29 |         1.6 |    75.1 |     23.2 |       4.5 |            6
 TUV     |    38 |        16.6 |    56.2 |     27.2 |       3.8 |             
 WAFU    |    60 |             |         |          |       2.8 |         12.2
 NAU     |   100 |         6.1 |    60.8 |       33 |      -3.6 |           90
 FALK    | 164.5 |          95 |         |          |       1.2 |          4.1
 KIR     |   173 |        24.3 |    67.8 |      7.9 |       0.2 |            2
 AXA     | 175.4 |         2.5 |    73.8 |     23.6 |       3.1 |            8
 COOK    | 183.2 |         5.1 |    82.1 |     12.7 |       2.2 |         13.1
 MH      |   193 |        14.3 |    71.8 |     13.9 |      12.9 |           36

# 3) Get a list of countries sorted by the highest rates inflation: SELECT -- FROM -- ORDER BY --

SELECT country, inflation FROM economy ORDER BY inflation DESC NULLS LAST;

 country | inflation 
---------+-----------
 SYR     |      59.1
 YV      |      56.2
 IR      |      42.3
 MW      |      26.9
 SUD     |        25
 RA      |      20.8
 BY      |        19
 WEST    |        14
 ER      |        13
 MH      |      12.9
 RG      |      11.9
 YE      |      11.8
 
# 4) List all countries with the majority of their GDP coming from agriculture: SELECT -- FROM -- WHERE --

SELECT country, gdp, agriculture FROM economy WHERE agriculture > 50 ORDER BY agriculture DESC NULLS LAST;

 country |  gdp  | agriculture 
---------+-------+-------------
 FALK    | 164.5 |          95
 LB      |  1977 |        76.9
 SP      |  2372 |        59.3
 GNB     |   880 |          58
 RCA     |  2050 |        56.6
 COM     |   658 |          51

# OR, if thinking about 'majority' as larger than other sectors:
SELECT country, agriculture, service, industry FROM economy 
WHERE agriculture > service AND agriculture > industry
ORDER BY agriculture DESC NULLS LAST;

 country | agriculture | service | industry 
---------+-------------+---------+----------
 LB      |        76.9 |    17.7 |      5.4
 SP      |        59.3 |    33.5 |      7.2
 GNB     |          58 |    28.5 |     13.5
 RCA     |        56.6 |    28.9 |     14.5
 COM     |          51 |      39 |       10
 SLB     |          50 |    39.4 |     10.6
 WAL     |        47.9 |    33.5 |     18.6
 ETH     |          47 |    42.2 |     10.8
 TCH     |        46.3 |    43.8 |      9.9
 ZRE     |        44.3 |      34 |     21.7
 RMM     |        38.5 |      37 |     24.4

## NOTICE that FALK has disappeared b/c FALK has NULLS for service & industry
## You can change nul values. coalesce(variable, 0) substitutes '0' for NULL values
## coalesce(variable, 0) >> checks variable, if it's null, make it 0

SELECT country, agriculture FROM economy
WHERE agriculture > coalesce(service, 0) AND agriculture > coalesce(industry, 0)
ORDER BY agriculture DESC NULLS LAST;

 country | agriculture 
---------+-------------
 FALK    |          95
 LB      |        76.9
 SP      |        59.3
 GNB     |          58
 RCA     |        56.6
 COM     |          51
 SLB     |          50
 WAL     |        47.9
 ETH     |          47
 TCH     |        46.3
 ZRE     |        44.3
 RMM     |        38.5

# 5) Create a list of countries in order of highest unemployment, and join the table 
# with the country table so you get the names of the countries not the country code: 
# SELECT -- FROM -- JOIN - ON -- ORDER BY --

### Watch out for what I select -- country.name vs economy.country

SELECT country.name, economy.unemployment FROM economy 
JOIN country ON economy.country = country.code
ORDER BY unemployment DESC NULLS LAST;

               name               | unemployment 
----------------------------------+--------------
 Zimbabwe                         |           95
 Nauru                            |           90
 Liberia                          |           85
 Burkina Faso                     |           77
 Turkmenistan                     |           60
 Djibouti                         |           59
 Congo                            |           53
 Senegal                          |           48
 Nepal                            |           46
 Bosnia and Herzegovina           |         44.3
 Haiti                            |         40.6
 Swaziland                        |           40
 Kenya                            |           40
 Marshall Islands                 |           36
 Yemen                            |           35
 Afghanistan                      |           35
 Grenada                          |         33.5

# 6) Invent your own query for the economy table--as simple or as complicated as you want it to be.

SELECT country.name AS country, economy.gdp AS GDP, economy.inflation, economy.unemployment FROM economy
JOIN country on economy.country = country.code
WHERE inflation > 10 ORDER BY inflation DESC NULLS LAST LIMIT 20;

    country      |  gdp   | inflation | unemployment 
------------------+--------+-----------+--------------
 Syria            |  64700 |      59.1 |         17.8
 Venezuela        | 367500 |      56.2 |          7.9
 Iran             | 411900 |      42.3 |           16
 Malawi           |   3683 |      26.9 |             
 Sudan            |  52500 |        25 |           20
 Argentina        | 484600 |      20.8 |          7.5
 Belarus          |  69240 |        19 |            1
 West Bank        |   3700 |        14 |             
 Eritrea          |   3438 |        13 |             
 Marshall Islands |    193 |      12.9 |           36
 Guinea           |   6544 |      11.9 |             
 Yemen            |  43890 |      11.8 |           35
 Sierra Leone     |   4607 |      11.1 |             
 Bhutan           |   2133 |        11 |          2.1
 Ghana            |  45550 |        11 |           11
 Uzbekistan       |  55180 |      10.1 |          4.9

# PART TWO: AGGREGATE QUERIES (3 POINTS)
# Do the following for queries using the 'language' table.

# 1) Find the top 10 most dominant languages (highest percentage) in their respective countries. 
# This isn't an aggregate query, use ORDER BY along with other stuff.

SELECT name AS language, percentage FROM language
ORDER BY percentage DESC NULLS LAST LIMIT 10;

  language  | percentage 
------------+------------
 English    |        100
 Portuguese |        100
 Icelandic  |        100
 Italian    |        100
 Russian    |        100
 German     |        100
 Dutch      |        100
 German     |        100
 Polish     |        100
 Burmese    |        100

SELECT name AS language, country, percentage FROM language
ORDER BY percentage DESC NULLS LAST, country LIMIT 10;

 language | country | percentage 
----------+---------+------------
 English  | AG      |        100
 English  | AXA     |        100
 English  | BDS     |        100
 English  | BVIR    |        100
 Spanish  | C       |        100
 German   | D       |        100
 Spanish  | DOM     |        100
 English  | FALK    |        100
 French   | FGU     |        100
 German   | FL      |        100

SELECT name AS language, country, percentage FROM language
WHERE percentage = 100 
ORDER BY percentage DESC NULLS LAST, country;

# lists all countries where there is a dominant spoken language

# 2) Get a list of the 10 countries with the most languages according to this database. 
# This is an aggregate query. This should have two columns, the country and 
# the number of languages in the country. Hint: you will be using COUNT() and GROUP BY along with other stuff.

SELECT country, COUNT(language) FROM language         ###WRONG????
GROUP BY country ORDER BY COUNT(language) DESC NULLS LAST LIMIT 10;

 country | count 
---------+-------
 PK      |     8
 IR      |     7
 SF      |     7
 AUS     |     6
 NLSM    |     6
 GNB     |     6
 NZ      |     6
 BZ      |     6
 MC      |     6
 A       |     6

SELECT country, COUNT(country) FROM language          ## ANSWER FROM CLASS 
GROUP BY country ORDER BY COUNT(language) DESC NULLS LAST LIMIT 10;

# 3) Get the same list, but join the country code to the country table so you get the full names of the countries.

SELECT country.name AS country, COUNT(language ##OR language.name) AS number_of_languages FROM language
JOIN country ON language.country = country.code
GROUP BY country.name ORDER BY number_of_languages DESC NULLS LAST LIMIT 10;

## OR

SELECT country.name, count(language.name) FROM language 
JOIN country ON country.code = language.country
GROUP BY country.name ORDER BY count(language.name) DESC LIMIT 10;

    country    | number_of_languages 
---------------+---------------------
 Pakistan      |                   8
 Finland       |                   7
 Iran          |                   7
 Austria       |                   6
 New Zealand   |                   6
 Sint Maarten  |                   6
 Australia     |                   6
 Monaco        |                   6
 Belize        |                   6
 Guinea-Bissau |                   6

# 4) Get a list of the 10 languages that are most commonly found from country to country. 
# This should have two columns, the language and the number of countries it appears in.

# my answer
SELECT name AS language, COUNT(country) AS no_countries_spoken FROM language
GROUP BY name ORDER BY COUNT(country) DESC NULLS LAST LIMIT 10;

# class answer; same thing as my code
SELECT name, count(name) FROM language
GROUP BY name ORDER BY count(name) DESC NULLS LAST LIMIT 20;

  language  | no_countries_spoken 
------------+---------------------
 English    |                  35
 Spanish    |                  26
 French     |                  17
 Russian    |                  14
 German     |                  11
 Portuguese |                  10
 Arabic     |                   8
 Creole     |                   6
 Serbian    |                   6
 Turkish    |                   6

# 5) Get a list of the 20 languages that are most commonly found from country to country.
# This is just like the previous query, except it should have a third column that has 
# the average percentage of the population that speaks the language.

# my answer
SELECT name AS language, COUNT(country) AS no_countries_spoken, AVG(percentage) AS avg_pct FROM language
GROUP BY name ORDER BY COUNT(language) DESC NULLS LAST LIMIT 20;

# class answer; same thing as my code

SELECT name, count(name), AVG(percentage) FROM language
GROUP BY name ORDER BY count(name) DESC, AVG(percentage) DESC LIMIT 20;

    name    | count |         avg         
------------+-------+---------------------
 English    |    35 | 55.9428571428571429
 Spanish    |    26 | 72.6423076923076923
 French     |    17 | 42.2647058823529412
 Russian    |    14 | 23.5857142857142857
 German     |    11 | 36.1363636363636364
 Portuguese |    10 | 43.9600000000000000
 Arabic     |     8 | 49.8125000000000000
 Creole     |     6 | 53.3833333333333333
 Serbian    |     6 | 26.8833333333333333
 Turkish    |     6 | 18.8333333333333333
 Italian    |     5 | 45.1200000000000000
 Albanian   |     5 | 44.2600000000000000
 Dutch      |     5 | 34.0400000000000000
 Hungarian  |     5 | 22.9800000000000000
 Roma       |     5 |  1.9400000000000000
 Greek      |     4 | 44.7000000000000000
 Armenian   |     3 | 35.4000000000000000
 Croatian   |     3 | 35.2000000000000000
 Chinese    |     3 | 33.4000000000000000
 Uzbek      |     3 | 32.3000000000000000

# 6) Finally, modify that last query so that you only get languages that are spoken in more than 
# four countries, but order the results by the highest average percentage of speakers. 
# Hint: you need to use HAVING along with other stuff.

# my code
SELECT name AS language, COUNT(country) as no_countries_spoken, AVG(percentage) AS avg_pct FROM language
GROUP BY name HAVING COUNT(country) > 4
ORDER BY AVG(percentage) DESC NULLS LAST LIMIT 20;

# class answer
SELECT name, count(name), AVG(percentage) FROM language
GROUP BY name HAVING COUNT(name) > 4
ORDER BY AVG(percentage) DESC;

    name    | count |         avg         
------------+-------+---------------------
 Spanish    |    26 | 72.6423076923076923
 English    |    35 | 55.9428571428571429
 Creole     |     6 | 53.3833333333333333
 Arabic     |     8 | 49.8125000000000000
 Italian    |     5 | 45.1200000000000000
 Albanian   |     5 | 44.2600000000000000
 Portuguese |    10 | 43.9600000000000000
 French     |    17 | 42.2647058823529412
 German     |    11 | 36.1363636363636364
 Dutch      |     5 | 34.0400000000000000
 Serbian    |     6 | 26.8833333333333333
 Russian    |    14 | 23.5857142857142857
 Hungarian  |     5 | 22.9800000000000000
 Turkish    |     6 | 18.8333333333333333
 Roma       |     5 |  1.9400000000000000


 # another example - WHERE vs HAVING

SELECT name, count(name), AVG(percentage) FROM language WHERE percentage > 20
GROUP BY name HAVING COUNT(name) > 4
ORDER BY AVG(percentage) DESC;

### COUNT CHANGES bc countries where pct < 20 are knocked out from the original calculation 
before the grouping happened!!

  name   | count |         avg         
---------+-------+---------------------
 English |    21 | 88.5428571428571429
 Spanish |    21 | 87.5666666666666667
 Arabic  |     5 | 79.2000000000000000
 German  |     5 | 76.9200000000000000
 French  |     9 | 73.5222222222222222
 Creole  |     5 | 62.4200000000000000
 Russian |     5 | 50.8000000000000000

SELECT name, count(name), AVG(percentage) FROM language WHERE percentage > 20
GROUP BY name 
ORDER BY count(name) DESC, AVG(percentage) DESC;

---------------------+-------+----------------------
 English             |    21 |  88.5428571428571429
 Spanish             |    21 |  87.5666666666666667
 French              |     9 |  73.5222222222222222
 Arabic              |     5 |  79.2000000000000000
 German              |     5 |  76.9200000000000000
 Creole              |     5 |  62.4200000000000000
 Russian             |     5 |  50.8000000000000000
 Portuguese          |     4 |  99.7500000000000000
 Albanian            |     3 |  71.9666666666666667
 Italian             |     2 |  99.0000000000000000
 Greek               |     2 |  88.5000000000000000
 Romanian            |     2 |  83.4000000000000000
 Dutch               |     2 |  78.0000000000000000
 Serbian             |     2 |  75.9500000000000000
 Philippine Language |     2 |  23.3000000000000000
 Chamorro            |     2 |  22.3000000000000000
 Icelandic           |     1 | 100.0000000000000000
 Pitkern             |     1 | 100.0000000000000000


###################### CLASS WORK ####################

# How many unique languages are in the data?
SELECT count(distinct name) from language;

vs

SELECT count(name) from language;

# 

SELECT * FROM language WHERE name IN('English','Spanish') ORDER BY name;

# Doing triple joins -- join by country code, then country name. Do subqueries

## Use 2 joins

SELECT language.name, country.name, language.percentage, economy.gdp 
FROM language JOIN economy ON language.country = economy.country
JOIN country ON country.code = economy.country
WHERE language.name IN('English', 'Spanish')
ORDER BY economy.gdp;

## OR, make/use subtables. WITH () ends after the first subtable

WITH langgdp as (
SELECT language.name AS lang, country.name AS country, language.percentage AS lp, economy.gdp AS gdp
FROM language JOIN economy ON language.country = economy.country
JOIN country ON country.code = economy.country
WHERE language.name IN('English', 'Spanish') ORDER BY economy.gdp)   ### CLOSE BRACKET

SELECT langgdp.lang, sum(langgdp.gdp), avg(langgdp.gdp) FROM langgdp GROUP BY langgdp.lang;

  lang   |    sum     |         avg         
---------+------------+---------------------
 Spanish | 21687741.7 | 834143.911538461538
 English | 23652214.8 | 675777.565714285714

## What are the longest rivers?

SELECT name, length FROM river ORDER BY length DESC NULLS LAST;   

# count the number of countries that a river passes through

SELECT river, count(river) 
FROM geo_river 
GROUP BY river
ORDER BY count(river) DESC;

VS

SELECT river, count(distinct country) 
FROM geo_river 
GROUP BY river 
ORDER BY count(river) DESC;

SELECT river, count(province) 
FROM geo_river 
GROUP BY river 
ORDER BY count(river) DESC;

# Which mountain passes through most countries? 
# Mountains that pass through multiple provinces in the same country >> 

SELECT distinct mountain, country FROM geo_mountain ORDER BY mountain;

            mountain            | country 
--------------------------------+---------
 Aconcagua                      | RA
 Aenos                          | GR
 Agung                          | RI
 Alam Kuh                       | IR
 Alpamayo                       | PE
 Alto Toroni                    | BOL
 Alto Toroni                    | RCH
 Altun Shan Peak                | CN

vs

SELECT mountain, country FROM geo_mountain ORDER BY mountain;

            mountain            | country 
--------------------------------+---------
 Aconcagua                      | RA
 Aenos                          | GR
 Agung                          | RI
 Alam Kuh                       | IR
 Alpamayo                       | PE
 Alto Toroni                    | RCH
 Alto Toroni                    | BOL
 Altun Shan Peak                | CN
 Ampato                         | PE


## NEED TO GET distinct countries bc this table mainly relies on the number of province to determine 
where rivers pass through, not countries. Need to be explicit about filtering for distinct countries

SELECT mountain, count(distinct country) country, count(distinct province) province FROM geo_mountain
GROUP BY mountain
ORDER BY count(distinct province) DESC;

SELECT distinct mountain, country from geo_mountain ORDER BY mountain; 
## provinces are no longer our concern; we care only about distinct countries
## we want multiple entries for mountains that pass through multiple COUNTRIES only, not multiple provinces

VS

SELECT mountain, country from geo_mountain ORDER BY mountain;

## Join to get the names of countries. Then group mountains by country to show how many/what countries
mountains pass through

with countryMountain as (
SELECT distinct mountain, country from geo_mountain ORDER BY mountain)
SELECT country.name, count(country.name) FROM countryMountain 
JOIN country ON country.code = countryMountain.country
GROUP BY country.name
ORDER BY count(country.name) DESC;

               name               | count 
----------------------------------+-------
 China                            |    49
 Indonesia                        |    49
 United States                    |    37
 Russia                           |    29
 Chile                            |    19
 Philippines                      |    18
 Canada                           |    17
 Italy                            |    17
 Spain                            |    16
 Argentina                        |    15
 Greece                           |    14
 India                            |    12
 Australia                        |    10
 Pakistan                         |    10
 Papua New Guinea                 |     9
 France                           |     9
 Japan                            |     9
